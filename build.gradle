buildscript {
    ext {
        junit_jupiter_version = '5.7.2'
        junit_platform_version = '1.6.0'
        kotlin_version = '1.5.21'
        dokka_version = '0.9.18'
        bintray_version = '1.8.5'
        spek_version = '2.0.15'
        mockito_version = '3.11.2'
        json_path_assert_version = '2.6.0'
        maven_model_version = '3.3.1'

        publish_version = '0.15.0'
        jacoco_toolVersion = '0.8.7'
    }

    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:$publish_version"
    }
}

buildscript {
    ext.error = false
    if (!ext.error) {
        apply from: "${rootProject.projectDir}/gradle/scripts/localRepo.gradle"
        includeLocalRepo(gradle.ext.repo, 'junitjacoco', gradle.ext.version, this)
        includeLocalRepo(gradle.ext.repo, 'project-utils', gradle.ext.version, this)
    }

    def setUpDependency = { String pluginName ->
        if (ext.error || !ext."plugin_${pluginName}_exists") {
            dependencies {
                classpath "ch.tutteli:tutteli-gradle-$pluginName:${gradle.ext.previous_version}"
            }
        }
    }
    setUpDependency('junitjacoco')
    setUpDependency('project-utils')
}

version = gradle.ext.version
group = 'ch.tutteli'

subprojects {
    apply plugin: 'groovy'
    version = rootProject.version
    group = rootProject.group

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    repositories {
        mavenCentral()
    }
}

def pluginProjects = subprojects - project('test-utils')
configure(pluginProjects) {
    apply plugin: 'java-gradle-plugin'
    apply plugin: 'com.gradle.plugin-publish'
}

configure(pluginProjects) {
    apply plugin: 'ch.tutteli.project.utils'
    apply plugin: 'ch.tutteli.junitjacoco'

    junitjacoco {
        //enable or disable junit xml (disabled by default, enable it as follows)
        enableJunitReport = true

        //delegates to jacocoTestReport (just for your convenience, everything in one place)
        jacocoReport {
            reports {
                html.enabled = true
            }
        }

        //delegates to the jacoco extension (just for your convenience, everything in one place)
        jacoco {
            //e.g. set the version to a different version than the default
            //toolVersion = '0.8.3'
        }
    }

    test {
        reports {
            html {
                destination = file("${buildDir}/reports/junit")
            }
        }
    }
}

configure(pluginProjects) { subproject ->

    //TODO can be removed if plugin DSL is also applicable to settings.gradle
    def createClasspathManifest = task('createClasspathManifest') {
        def outputDir = file("${buildDir}/${name}")

        inputs.files sourceSets.main.runtimeClasspath
        outputs.dir outputDir

        doLast {
            outputDir.mkdirs()
            file("${outputDir}/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
        }
    }
    test.dependsOn(createClasspathManifest)

    dependencies {
        testImplementation(project(':test-utils')) {
            exclude group: 'org.codehaus.groovy'
        }
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"

        testRuntimeOnly(files(createClasspathManifest)) //required for settings.gradle test
        testImplementation "org.mockito:mockito-core:$mockito_version"
        testImplementation "com.jayway.jsonpath:json-path-assert:$json_path_assert_version"
    }

    afterEvaluate {
        gradlePlugin {
            plugins {
                tutteliPlugin { //name does not matter
                    id = subproject.ext.plugin_id
                    implementationClass = subproject.ext.plugin_class
                }
            }
        }

        pluginBundle {
            website = 'https://github.com/robstoll/tutteli-gradle-plugins'
            vcsUrl = 'https://github.com/robstoll/tutteli-gradle-plugins.git'

            plugins {
                tutteliPlugin { //name does not matter
                    id = subproject.ext.plugin_id
                    displayName = subproject.ext.plugin_name
                    description = subproject.ext.plugin_description
                    tags = subproject.ext.plugin_tags
                }
            }

            mavenCoordinates {
                groupId = subproject.group
            }
        }
    }

    apply plugin: 'maven-publish'

    task repo(type: Copy) {
        def outputJar = "${gradle.ext.repo}/ch/tutteli/${project.name}/${project.version}/"
        outputs.dir outputJar
        from jar
        from tasks.matching { it.name == 'generatePomFileForPluginMavenPublication' }
        rename('pom-default.xml', "${project.name}-${project.version}.pom")
        into outputJar
    }
}

task removeRepo(type: Delete) {
    delete gradle.ext.repo
}

[
    'junitjacoco',
    'spek',
].each { projectName ->
    Project project = project(":tutteli-gradle-$projectName")
    def generateHardCodedDependencies = project.task('generateHardCodedDependencies', group: 'build') {
        doLast {
            def folder = new File("${project.projectDir}/src/main/groovy/ch/tutteli/gradle/$projectName/generated")
            mkdir folder
            new File(folder, "Dependencies.groovy").text =
                """package ch.tutteli.gradle.${projectName}.generated
                |
                |class Dependencies {
                |   public static final jacoco_toolsVersion = '$project.jacoco_toolVersion'
                |   public static final junit_jupiter_version = '$project.junit_jupiter_version'
                |   public static final junit_platform_version = '$project.junit_platform_version'
                |   public static final spek_version = '$project.spek_version'
                |}
                """.stripMargin('|')
        }
    }
    project.compileGroovy.dependsOn generateHardCodedDependencies
}

/*
Release & deploy
----------------
(assumes you have an alias named gr pointing to ./gradlew)
1. gr removeRepo
2. Update master:
    a) point to the tag
        1) update version of the badges in README (except for codecov)
        2) search for `tree/master` in README and replace it with `tree/vX.Y.Z`
    b) change `version` in settings.gradle to X.Y.Z (remove -SNAPSHOT)
    c) search for old version and replace by new with the *exception* of previous_version in settings.gradle
    c) commit & push (modified README.md and settings.gradle)
    d) git tag vX.Y.Z
    e) git push origin vX.Y.Z
3. publish plugins
   a) gr publishPlugins
4. create release on github


Prepare next dev cycle
-----------------------
1. change version in settings.gradle to X.Y.Z-SNAPSHOT
2. change previous_version in settings.gradle
3. point to master
   a) search for `tree/vX.Y.Z` in README and replace it with `tree/master`
4. commit & push changes

*/
